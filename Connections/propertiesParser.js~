var fs = require('fs');
/*
  GOAL: Read and parse connection.properties file to create proper database url and connections
*/
var inBetweenPeriods = /\.(.+)\./; 
var beforePeriod = /^(.*?\w+)/ ;
var fileString = '../dbconfig/connection.properties';

var connectionNameExistsInObject = function(obj, connectionName){
  if(obj[connectionName]){
    return true;
  } else {
    return false;
  }
}


module.exports.readProperties = function (callback, optionalFileString) {
  if(optionalFileString){
    fileString = optionalFileString; 
  }
  var connections = {};
  fs.readFile(fileString,'UTF-8', function (err, data){
    if(err) throw err;
<<<<<<< HEAD
    

=======
    var fileLines = data.split('\n');
    fileLines = fileLines.filter(function(item,index,array){if(item !== ' '){ return item;}});
    fileLines.forEach(function(line, index, array){
       var connectionName = inBetweenPeriods.exec(line);
       if(connectionName){
         connectionName = connectionName[0].slice(1, connectionName[0].length - 1);
       }
       if(connectionNameExistsInObject(connections, connectionName)){
         var prop = line.split('.')[2].split('=');
         connections[connectionName]['info'][prop[0]] = prop[1];
            
       } else {
         connections[connectionName] = {};
         connections[connectionName]['info'] = {};
<<<<<<< HEAD
         var cnnectTypeName = beforePeriod.exec(line)[0];
=======
         var cnnectTypeName = beforePeriod.exec(line)[0]; 
>>>>>>> Prop parser pro
         connections[connectionName]['connectionType'] = cnnectTypeName;
         var prop = line.split('.')[2].split('=');
         connections[connectionName]['info'][prop[0]] = prop[1];
       }
    });
  });
}

readProperties();



